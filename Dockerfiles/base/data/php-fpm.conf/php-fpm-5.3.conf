; ################################################################################
; ####
; #### The following settings can be overwritten by later includes
; ####
; ################################################################################


; ############################################################
; Timeouts
; ############################################################

[www]
; The timeout for serving a single request after which the worker process will be killed.
; This option should be used when the 'max_execution_time' ini option does not stop script
; execution for some reason.
request_terminate_timeout = 120s


; ############################################################
; Logging
; ############################################################

[global]
error_log = /proc/self/fd/2
log_level = notice

[www]
; if we send this to /proc/self/fd/1, it never appears
access.log = /proc/self/fd/2


; ############################################################
; Backlog configuration
; ############################################################

[www]
; A maximum of backlog incoming connections will be queued for processing.
; If a connection request arrives with the queue full the client may receive an error with an
; indication of ECONNREFUSED, or, if the underlying protocol supports retransmission,
; the request may be ignored so that retries may succeed.

; This should not be greater than `cat /proc/sys/net/core/somaxconn`, otherwise connections
; are silently truncated
listen.backlog = 1024


; ############################################################
; Worker configuration
; ############################################################

[www]
; static - the number of child processes is fixed (pm.max_children).
;
; dynamic - the number of child processes is set dynamically based on the following directives:
; pm.max_children, pm.start_servers, pm.min_spare_servers, pm.max_spare_servers.
;
; ondemand - the processes spawn on demand (when requested, as opposed to dynamic, where
; pm.start_servers are started when the service is started.
pm = ondemand

; The maximum number of child processes to be created
pm.max_children = 50

; The number of child processes created on startup. Used only when pm is set to dynamic.
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2.
pm.start_servers = 4

; The desired minimum number of idle server processes.
pm.min_spare_servers = 2

; The desired maximum number of idle server processes.
pm.max_spare_servers = 6

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries.
; For endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default value: 0.
pm.max_requests = 500

; The number of seconds after which an idle process will be killed. Used only when pm is set to ondemand
pm.process_idle_timeout = 10s


; ############################################################
; Include
; ############################################################


[global]
include   = /usr/local/etc/php-fpm.d/*.conf


; ################################################################################
; ####
; #### The following settings overwrite any includes again
; ####
; ################################################################################


; ############################################################
; Required for Dockerization
; ############################################################

[global]
daemonize = no

[www]

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
; Note: on highloaded environement, this can cause some delay in the page
; process time (several ms).
; Default Value: no
catch_workers_output = yes


; ############################################################
; User and Group
; ############################################################

[www]
user  = devilbox
group = devilbox


; ############################################################
; Networking
; ############################################################

[www]
; Ensure to listen here
listen         = 9000
